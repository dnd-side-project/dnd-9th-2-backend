# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Baggle Server CI/CD with Docker

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: 🍃 JDK 17로 설정합니다.
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
      
    - name: 🍃 application.yml 파일을 생성합니다.
      run: |
        cd ./src/main
        cd ./resources
        touch ./application.yml
        echo "$APPLICATION" > ./application.yml
      env:
        APPLICATION: ${{ secrets.APPLICATION }}
    
    - name: 🍃 gradle build를 위한 권한을 부여합니다.
      run: chmod +x gradlew
      
    - name: 🍃 gradle build 중입니다.
      run: ./gradlew build -x test
        
    - name: 🍃 docker image build 후 docker hub에 push합니다.
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_REPOSITORY }}/${{ secrets.DOCKER_IMAGE }} .
        docker push ${{ secrets.DOCKER_REPOSITORY }}/${{ secrets.DOCKER_IMAGE }}
        
    - name: 🍃 deploy.sh 파일을 EC2 server로 전달합니다.
      uses: appleboy/scp-action@master
      with:
        username: ubuntu
        host: ${{ secrets.AWS_HOST }}
        key: ${{ secrets.AWS_KEY }}
        port: ${{ secrets.AWS_PORT }}
        source: "./scripts/deploy.sh"
        target: "/home/ubuntu/"
        
    - name: 🍃 docker-compose.yml 파일을 EC2 server로 전달합니다.
      uses: appleboy/scp-action@master
      with:
        username: ubuntu
        host: ${{ secrets.AWS_HOST }}
        key: ${{ secrets.AWS_KEY }}
        port: ${{ secrets.AWS_PORT }}
        source: "./docker-compose.yml"
        target: "/home/ubuntu/"
        
    - name: 🍃 docker hub에서 pull 후 deploy합니다.
      uses: appleboy/ssh-action@master
      with:
        username: ubuntu
        host: ${{ secrets.AWS_HOST }}
        key: ${{ secrets.AWS_KEY }}
        script: |
          sudo docker pull ${{ secrets.DOCKER_REPOSITORY }}/${{ secrets.DOCKER_IMAGE }}
          chmod 777 ./scripts/deploy.sh
          cp ./scripts/deploy.sh ./deploy.sh
          ./deploy.sh
          docker image prune -f
